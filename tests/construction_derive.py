import requests
import json
import time

def test_construction_derive():
    # Define the API endpoint URL
    url = "http://192.168.1.80:8080/construction/derive"  # Replace with the actual endpoint URL and port

    # Define the request payload
    payload = {
        "network_identifier": {
            "blockchain": "mochimo",
            "network": "mainnet"
        },
        "public_key": {
            "hex_bytes": "0x08474618156da997e2f587a96ad4968750a6d8245b097cf98a3d5d1608c9500f2bf15d353f584f1e029c94295238d147e9fe735581ab6fdb80bd0e4709bb237dccc6954244a87fab9feb377e1005ca6d3d2b52b26480f793870c3fa7742737a09086a72b0fd0e8c9bffe0c38be19fe0173e23d018cdf84c2be49b8c4e6ccd37fff696687a58f70c90523128b22b45785b5bd48c4e8d7a8dd326d5a5e013c2b40c94cc5bdd1558b734e0c7a3d10c960793adf7b9301ff34a6af6afeaa1af6b47ac8996e5dad1bb3b10c9b30030a274664b603cf9636a0340dadbe0b4027336a9fb030bc98d8c290e86bc386604f7d13c1ad9c6d258e39f52318f87bc845f3e8d3a16b8754f8079ba8cae21e74c2c0b5ba6f0d46092e9c1a1792693a77b58ac8aa118f92a11d171b65c25eabca46b627feb05e4df09cbc0a8b73ffb76293cd38d9597386f6934e1c86853d0e69a554c9cec23588c03433db0977f5bc2964c013a88fb34433c75d4b71b1728b4151560e67203ccdcb288f8f9bdb23ef5deb5190c2c372bd8b4389e830907d6b66e7a67ebda79cf156e525e0c54004f41b7a94db4f7858eec521907a7bfa6ead88f52f40a81f02fb9ef37dfc72c372bff2a1a09be532f4607a5dcfe823ba19b9fbf52d2aafa65a14ca0b1a20d56036b749146418f8d5ba07f0b7ce90b4cecbc96a0312307ac230a36df9592f57db6fd25e9b425a2a8d7584521c95de7f134446c6d5f7ef06f5195f5f232290eb30ded9e8a3b5e52780fbdb468948beea1cc6dcacff2ef673afcad65678037b83aceca1a09149496c25d45eafab85dafe909d0ed7da644b3b83c27291c72a690607988394feebf6672768caffb3ae466d79958a3bea823484934221ad9edd3f064632a01b36c6fe4542d8abe383c116c21bfcc1b9109f0e27e74dbd80a738bc9efa56ab10c0b7a131f2e11aecbf23148dc00b5ed25bf5e873e37c909c4b7ab8f345c41d4fe6c24950f2cc82e08350a3a94403f2ffa27d9b3ffd728f22b9e5f543e868a757b13a4f69efece8f7df2321e8bf2321855343239f0038c0bf2bb50fc5fa1e92133d9e8e9d540fba1f76afbedd85c1cdd24a17a59596e9d298c91dec1eb07e6c9743deee132d007d3caf5f13ddbf6db5f8df3dfd5932ad726a2b1322d30240e8e70ec8239648a073350ef23b6a00facff75ce393dc5a5d4f7a6395059f0bd237b6eb3dd933345ae636b296525eb24bae2f9adf9d8ae07441348616caea72002ee4351a40ef9380b875a7b345d823d9a2a0a5252b2dd20c6c1f55954355b6a483bc18380bfa9441d12e2836688dfc9efb826406bff55bc388452047c289bdb75c89b72afefa5f470f96ca5e6f7b9c890891b231d9177c2ba6247593c69a99c68990b2fd7197dbc412ee38664f2f4114caa9e4c03516c421ce36efc268645c61e7b1ff27165ddd90af45ee0ed9b78f5f5e7b4057d4fe88d0e5f0c9669180dadd35af3d80a7532ebb8a3e9f89c5252190ee20b840b64817ac169734eee79eb01e74aff5a0c67ebdcd2144cb53662b17a297a46f4f618de239612f52ef820cfd6973920311beb6b683621e073c4512e666a843b96bb99b7349d6f4c09402cc2b8c969ac9b8e63e8c6e86325571e196fa01a65a7cadf3819c5b6d752012424e232a7400423fff35e3509ee45991325257c78f70ab387d289d64cd8356e7f29825224035831b6cd8f4e2433785df82211e757a748f94227ff0346e662040110f2c797c51758b5d7cf355564d6b9e0621236b8ca5c15095931ed36aec9b90740f1d347a923d3c7fd0daa193f01e20d14afa719cabc1e63b50026d53ce8fd4570ce1ec078714c6c0417e8f364f76e9f8fd7539483800e19a11f8dc68e5da8fd71db075e42a6ab6f57145dae3773b34e5ed1eae848c8a27a726a602232f032ec5040cc86931f8d1a6c06629113068a35dba15ab17c63f3ce2c91c9999baff67baca008a6a0483e0cb773adfe01e2f5e9e80512b5a95f83df964c4c4ff66bee19e4d7c4b363e8e87e9f8dad0576dacb4e07f89766c2401abb953ae8a3acf5a7834993ed4956c28e945a904b995fd01415495598d2f68190772f92fbe8a33e6e3de3340c81a32945db75ca57a8c3566fff993d2bb74de925f30e97f253d9b4642b92db7004f30977f817986120ac55232f821779ec27efa0f81b6fc28a1b687f81bf6926c8e7ee76a64d15a33b00fbff218203e0488fe434e53ae56fc11ad4382dd3c9dd58153d3032864568fb3ef430c6e0c1f363d38aafc9ae8267b377ef4c0d0cdbd17bffb1ca7f7757fb6d3bf2707cbea838fb8820f519d8180474c2d1d1e9639a32d61997fbba6b4f4abd0564318477d335b9a14d41ad020785d607af0ccf76f20677bc93592af06a7e804178dd0a644f6b25aa0e07bba477a32ca9d2e41afaf5caf50a66105cb547a91fe5b6c5aaf711cfcd2f043cf3884ce2249d66d6d5650404f1c4c42676b09eb0d13066f9ad6c0539e5e20fac44e136dd671a1f9b9b95ade9389295b3d1f42041c8cb662af75da4ea2fb7a2a107acdf70fbfd0efb93875438670276404dd3079844b46dc41fd4742895a5a0c2fdde01a1ff5594ab52137271a31dd349336eb90f6ac4d51ab7d2ec7dd2461aab2921e03af4eef0cad691c50e696b3c0def02da7fcef3f0a1798c7b156c6f44ac75d63d92ce0ed5005f07187f38c94bc0b397f1eae247bbaf11a0da3ae6a5496cc610e948b073d3f88a12ad7fe560d79a26ed696c0e364544cb4a42fa24aefa82e1e1dab414c2820dfa99f72ce5186d8353c145628aa50649b29e8b546f78adb9421f181aaef8dc97642b563c8d32fc54e385533f69dcaafee9231fd44a5fc05993efe1b4881b20579bcb110a0a2530818aa87df1b6f2e738fcc967b97fcb084071527ba722e23f2775cf94f501fa3b31c09254524937ccdf5995eaead47f01f3f799f701af03c0758c264b4f51068575baecdaa00eeab0cad7f18a33ad831aecb1bee18cfa1c376191da12fad974993e66be0743ebed70941688090ec31c7b9e8b35bdacb0c6a312ecf434f465629bef65e526d85eb6e468489f53b94e4748db5016f003605f1042069420694206942069420",  # Replace with an actual public key in hex format
            "curve_type": "wotsp"  # Replace with actual curve type if needed
        },
        "metadata": {}  # Include any additional metadata if necessary
    }

    # Start timer
    start = time.time()

    # Send the POST request
    response = requests.post(url, data=json.dumps(payload), headers={"Content-Type": "application/json"})

    # End timer
    end = time.time()

    # Print the response
    if response.status_code == 200:
        print("Response JSON:")
        print(json.dumps(response.json(), indent=4))
    else:
        print(f"Error: {response.status_code}")
        print(response.text)

    # Print the time taken
    print(f"Time taken: {end - start} seconds")

# Run the test
if __name__ == "__main__":
    test_construction_derive()
